// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.checkEmailStmt, err = db.PrepareContext(ctx, checkEmail); err != nil {
		return nil, fmt.Errorf("error preparing query CheckEmail: %w", err)
	}
	if q.deleteVoterStmt, err = db.PrepareContext(ctx, deleteVoter); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteVoter: %w", err)
	}
	if q.getAddressStmt, err = db.PrepareContext(ctx, getAddress); err != nil {
		return nil, fmt.Errorf("error preparing query GetAddress: %w", err)
	}
	if q.getAllCandidatesStmt, err = db.PrepareContext(ctx, getAllCandidates); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllCandidates: %w", err)
	}
	if q.getGubernatorialCandidatesStmt, err = db.PrepareContext(ctx, getGubernatorialCandidates); err != nil {
		return nil, fmt.Errorf("error preparing query GetGubernatorialCandidates: %w", err)
	}
	if q.getPresidentialCandidatesStmt, err = db.PrepareContext(ctx, getPresidentialCandidates); err != nil {
		return nil, fmt.Errorf("error preparing query GetPresidentialCandidates: %w", err)
	}
	if q.getTotalUsersNumStmt, err = db.PrepareContext(ctx, getTotalUsersNum); err != nil {
		return nil, fmt.Errorf("error preparing query GetTotalUsersNum: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.pendingVotersStmt, err = db.PrepareContext(ctx, pendingVoters); err != nil {
		return nil, fmt.Errorf("error preparing query PendingVoters: %w", err)
	}
	if q.registerContestantStmt, err = db.PrepareContext(ctx, registerContestant); err != nil {
		return nil, fmt.Errorf("error preparing query RegisterContestant: %w", err)
	}
	if q.registerUserStmt, err = db.PrepareContext(ctx, registerUser); err != nil {
		return nil, fmt.Errorf("error preparing query RegisterUser: %w", err)
	}
	if q.registerVoterStmt, err = db.PrepareContext(ctx, registerVoter); err != nil {
		return nil, fmt.Errorf("error preparing query RegisterVoter: %w", err)
	}
	if q.seedAdminStmt, err = db.PrepareContext(ctx, seedAdmin); err != nil {
		return nil, fmt.Errorf("error preparing query SeedAdmin: %w", err)
	}
	if q.totalVotedVotersStmt, err = db.PrepareContext(ctx, totalVotedVoters); err != nil {
		return nil, fmt.Errorf("error preparing query TotalVotedVoters: %w", err)
	}
	if q.totalVotersNumStmt, err = db.PrepareContext(ctx, totalVotersNum); err != nil {
		return nil, fmt.Errorf("error preparing query TotalVotersNum: %w", err)
	}
	if q.updatePendingStateStmt, err = db.PrepareContext(ctx, updatePendingState); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePendingState: %w", err)
	}
	if q.updateRegisterationStateStmt, err = db.PrepareContext(ctx, updateRegisterationState); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRegisterationState: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateVoterStmt, err = db.PrepareContext(ctx, updateVoter); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateVoter: %w", err)
	}
	if q.verifiedVotersStmt, err = db.PrepareContext(ctx, verifiedVoters); err != nil {
		return nil, fmt.Errorf("error preparing query VerifiedVoters: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.checkEmailStmt != nil {
		if cerr := q.checkEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkEmailStmt: %w", cerr)
		}
	}
	if q.deleteVoterStmt != nil {
		if cerr := q.deleteVoterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteVoterStmt: %w", cerr)
		}
	}
	if q.getAddressStmt != nil {
		if cerr := q.getAddressStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAddressStmt: %w", cerr)
		}
	}
	if q.getAllCandidatesStmt != nil {
		if cerr := q.getAllCandidatesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllCandidatesStmt: %w", cerr)
		}
	}
	if q.getGubernatorialCandidatesStmt != nil {
		if cerr := q.getGubernatorialCandidatesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGubernatorialCandidatesStmt: %w", cerr)
		}
	}
	if q.getPresidentialCandidatesStmt != nil {
		if cerr := q.getPresidentialCandidatesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPresidentialCandidatesStmt: %w", cerr)
		}
	}
	if q.getTotalUsersNumStmt != nil {
		if cerr := q.getTotalUsersNumStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTotalUsersNumStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.pendingVotersStmt != nil {
		if cerr := q.pendingVotersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing pendingVotersStmt: %w", cerr)
		}
	}
	if q.registerContestantStmt != nil {
		if cerr := q.registerContestantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing registerContestantStmt: %w", cerr)
		}
	}
	if q.registerUserStmt != nil {
		if cerr := q.registerUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing registerUserStmt: %w", cerr)
		}
	}
	if q.registerVoterStmt != nil {
		if cerr := q.registerVoterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing registerVoterStmt: %w", cerr)
		}
	}
	if q.seedAdminStmt != nil {
		if cerr := q.seedAdminStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing seedAdminStmt: %w", cerr)
		}
	}
	if q.totalVotedVotersStmt != nil {
		if cerr := q.totalVotedVotersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing totalVotedVotersStmt: %w", cerr)
		}
	}
	if q.totalVotersNumStmt != nil {
		if cerr := q.totalVotersNumStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing totalVotersNumStmt: %w", cerr)
		}
	}
	if q.updatePendingStateStmt != nil {
		if cerr := q.updatePendingStateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePendingStateStmt: %w", cerr)
		}
	}
	if q.updateRegisterationStateStmt != nil {
		if cerr := q.updateRegisterationStateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRegisterationStateStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateVoterStmt != nil {
		if cerr := q.updateVoterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateVoterStmt: %w", cerr)
		}
	}
	if q.verifiedVotersStmt != nil {
		if cerr := q.verifiedVotersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing verifiedVotersStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                             DBTX
	tx                             *sql.Tx
	checkEmailStmt                 *sql.Stmt
	deleteVoterStmt                *sql.Stmt
	getAddressStmt                 *sql.Stmt
	getAllCandidatesStmt           *sql.Stmt
	getGubernatorialCandidatesStmt *sql.Stmt
	getPresidentialCandidatesStmt  *sql.Stmt
	getTotalUsersNumStmt           *sql.Stmt
	getUserStmt                    *sql.Stmt
	getUserByEmailStmt             *sql.Stmt
	pendingVotersStmt              *sql.Stmt
	registerContestantStmt         *sql.Stmt
	registerUserStmt               *sql.Stmt
	registerVoterStmt              *sql.Stmt
	seedAdminStmt                  *sql.Stmt
	totalVotedVotersStmt           *sql.Stmt
	totalVotersNumStmt             *sql.Stmt
	updatePendingStateStmt         *sql.Stmt
	updateRegisterationStateStmt   *sql.Stmt
	updateUserStmt                 *sql.Stmt
	updateVoterStmt                *sql.Stmt
	verifiedVotersStmt             *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		checkEmailStmt:                 q.checkEmailStmt,
		deleteVoterStmt:                q.deleteVoterStmt,
		getAddressStmt:                 q.getAddressStmt,
		getAllCandidatesStmt:           q.getAllCandidatesStmt,
		getGubernatorialCandidatesStmt: q.getGubernatorialCandidatesStmt,
		getPresidentialCandidatesStmt:  q.getPresidentialCandidatesStmt,
		getTotalUsersNumStmt:           q.getTotalUsersNumStmt,
		getUserStmt:                    q.getUserStmt,
		getUserByEmailStmt:             q.getUserByEmailStmt,
		pendingVotersStmt:              q.pendingVotersStmt,
		registerContestantStmt:         q.registerContestantStmt,
		registerUserStmt:               q.registerUserStmt,
		registerVoterStmt:              q.registerVoterStmt,
		seedAdminStmt:                  q.seedAdminStmt,
		totalVotedVotersStmt:           q.totalVotedVotersStmt,
		totalVotersNumStmt:             q.totalVotersNumStmt,
		updatePendingStateStmt:         q.updatePendingStateStmt,
		updateRegisterationStateStmt:   q.updateRegisterationStateStmt,
		updateUserStmt:                 q.updateUserStmt,
		updateVoterStmt:                q.updateVoterStmt,
		verifiedVotersStmt:             q.verifiedVotersStmt,
	}
}
